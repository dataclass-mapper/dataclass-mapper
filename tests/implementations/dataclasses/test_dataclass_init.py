from dataclasses import dataclass, field

import pytest

from dataclass_mapper import create_mapper, ignore, map_to, mapper


def test_dataclass_field_init_False():
    @dataclass
    class Target:
        x: int
        y: int = field(init=False)

        def __post_init__(self):
            self.y = self.x + 1

    @mapper(Target, {"y": ignore()})
    @dataclass
    class Source:
        x: int

    assert map_to(Source(5), Target).y == 6


def test_dataclass_field_init_False_with_mapping():
    @dataclass
    class Target:
        x: int
        y: int = field(init=False)

        def __post_init__(self):
            self.y = self.x + 1

    @mapper(Target)
    @dataclass
    class Source:
        x: int
        y: int

    assert map_to(Source(x=5, y=4), Target).y == 4


def test_dataclass_field_init_False_with_ignore_mapping():
    @dataclass
    class Target:
        x: int
        y: int = field(init=False)

        def __post_init__(self):
            self.y = self.x + 1

    @mapper(Target, {"y": ignore()})
    @dataclass
    class Source:
        x: int
        y: int

    assert map_to(Source(x=5, y=4), Target).y == 6


def test_dataclass_custom_init():
    @dataclass
    class Target:
        x: int

        def __init__(self):
            self.x = 4

    with pytest.raises(NotImplementedError) as excinfo:
        create_mapper(Target, Target)

    assert str(excinfo.value) == "only dataclasses with autogenerated __init__ are supported"


def test_dataclass_init():
    @dataclass(init=False)
    class Target:
        x: int = 42

    with pytest.raises(NotImplementedError) as excinfo:
        create_mapper(Target, Target)

    assert str(excinfo.value) == "only dataclasses with autogenerated __init__ are supported"
