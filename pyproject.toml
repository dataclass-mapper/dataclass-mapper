[tool.poetry]
name = "dataclass-mapper"
version = "0.0.0"
description = "Autogenerate mappings between dataclasses"
authors = ["Jakob Kogler <jakob.kogler@gmail.com>"]

readme = "README.rst"
license = "MIT"

repository = "https://github.com/dataclass-mapper/dataclass-mapper"
homepage = "https://dataclass-mapper.readthedocs.io"
documentation = "https://dataclass-mapper.readthedocs.io"

keywords = ['dataclass', 'pydantic', 'python', 'automation']

classifiers = ["Topic :: Software Development :: Code Generators"]

[tool.poetry.dependencies]
python = "^3.8"
pydantic = { version = "^1.9.0", optional = true }

[tool.poetry.extras]
pydantic = ["pydantic"]

[tool.poetry.group.test.dependencies]
pytest = "^7.0.0"
black = "^22.3.0"
isort = "^5.10.1"
mypy = "^0.950"
tox = "^3.25.0"
pytest-cov = "^4.0.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
Sphinx = "^5.0.2"
sphinx-rtd-theme = "^1.0.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100

[tool.isort]
profile = "black"
line_length = 100

[tool.mypy]
warn_return_any = true
files = ["dataclass_mapper", "tests"]
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = "pytest"
ignore_missing_imports = true

[tool.pytest.ini_options]
addopts = "--doctest-glob \"*.rst\""
filterwarnings = ["error"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "@abstractmethod"
]

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "semver"
