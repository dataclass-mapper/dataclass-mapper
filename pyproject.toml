[tool.poetry]
name = "dataclass-mapper"
version = "2.0.0-alpha"
description = "Autogenerate mappings between dataclasses"
authors = ["Jakob Kogler <jakob.kogler@gmail.com>"]

readme = "README.rst"
license = "MIT"

repository = "https://github.com/dataclass-mapper/dataclass-mapper"
homepage = "https://dataclass-mapper.readthedocs.io"
documentation = "https://dataclass-mapper.readthedocs.io"

keywords = ['dataclass', 'pydantic', 'python', 'automation']

classifiers = [
  "Topic :: Software Development :: Code Generators",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Framework :: Pydantic",
  "Framework :: Pydantic :: 1",
  "Framework :: Pydantic :: 2",
]

[tool.poetry.dependencies]
python = "^3.8"
pydantic = { version = ">=1.9.0", optional = true }
SQLAlchemy = { version = ">= 2.0.0", optional = true }

[tool.poetry.extras]
pydantic = ["pydantic"]
SQLAlchemy = ["SQLAlchemy"]

[tool.poetry.group.test.dependencies]
pytest = "^7.2.0"
mypy = "^1.8.0"
tox = "^4.5.2"
pytest-cov = "^4.0.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
Sphinx = "^5.0.2"
sphinx-rtd-theme = "^1.3.0"
sphinxcontrib-plantuml = "^0.25"
sphinx-autobuild = "^2021.3.14"
enum-tools = {extras = ["sphinx"], version = "^0.11.0"}

[tool.poetry.group.dev.dependencies]
ruff = "^0.2.1"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
  # Pyflakes
  "F",
  # pycodestyle Error
  "E",
  # pycodestyle Warning
  "W",
  # flake8-pie
  "PIE",
  # isort
  "I001",
  # flake8-simplify
  "SIM",
  # flake8-bugbear
  "B",
  # Ruff-specific rules
  "RUF",
  # flake8-bandit
  "S",
  # flake8-comprehensions
  "C4",
  # flake8-commas
  "COM818",
]
ignore = ["S101"]

[tool.mypy]
check_untyped_defs = true
warn_return_any = true
files = ["dataclass_mapper", "tests"]
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = "pytest"
ignore_missing_imports = true

[tool.pytest.ini_options]
addopts = "--doctest-glob \"*.rst\""
filterwarnings = ["error"]

[tool.coverage.report]
exclude_also = ["pragma: no cover", "@abstractmethod", "Protocol"]

[tool.poetry-dynamic-versioning]
enable = false
vcs = "git"
style = "semver"
